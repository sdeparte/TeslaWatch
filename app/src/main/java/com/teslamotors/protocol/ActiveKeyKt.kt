// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializeactiveKey")
public inline fun activeKey(block: com.teslamotors.protocol.ActiveKeyKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.ActiveKey =
  com.teslamotors.protocol.ActiveKeyKt.Dsl._create(com.teslamotors.protocol.VCSEC.ActiveKey.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.ActiveKey`
 */
public object ActiveKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.ActiveKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.ActiveKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.ActiveKey = _builder.build()

    /**
     * `.VCSEC.KeyIdentifier activeKey = 1;`
     */
    public var activeKey: com.teslamotors.protocol.VCSEC.KeyIdentifier
      @JvmName("getActiveKey")
      get() = _builder.getActiveKey()
      @JvmName("setActiveKey")
      set(value) {
        _builder.setActiveKey(value)
      }
    /**
     * `.VCSEC.KeyIdentifier activeKey = 1;`
     */
    public fun clearActiveKey() {
      _builder.clearActiveKey()
    }
    /**
     * `.VCSEC.KeyIdentifier activeKey = 1;`
     * @return Whether the activeKey field is set.
     */
    public fun hasActiveKey(): kotlin.Boolean {
      return _builder.hasActiveKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.ActiveKey.copy(block: com.teslamotors.protocol.ActiveKeyKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.ActiveKey =
  com.teslamotors.protocol.ActiveKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.ActiveKeyOrBuilder.activeKeyOrNull: com.teslamotors.protocol.VCSEC.KeyIdentifier?
  get() = if (hasActiveKey()) getActiveKey() else null

