// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializesleepManagerRequest")
public inline fun sleepManagerRequest(block: com.teslamotors.protocol.SleepManagerRequestKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.SleepManagerRequest =
  com.teslamotors.protocol.SleepManagerRequestKt.Dsl._create(com.teslamotors.protocol.VCSEC.SleepManagerRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.SleepManagerRequest`
 */
public object SleepManagerRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.SleepManagerRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.SleepManagerRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.SleepManagerRequest = _builder.build()

    /**
     * `.VCSEC.DelaySleepRequest delaySleepRequest = 1;`
     */
    public var delaySleepRequest: com.teslamotors.protocol.VCSEC.DelaySleepRequest
      @JvmName("getDelaySleepRequest")
      get() = _builder.getDelaySleepRequest()
      @JvmName("setDelaySleepRequest")
      set(value) {
        _builder.setDelaySleepRequest(value)
      }
    /**
     * `.VCSEC.DelaySleepRequest delaySleepRequest = 1;`
     */
    public fun clearDelaySleepRequest() {
      _builder.clearDelaySleepRequest()
    }
    /**
     * `.VCSEC.DelaySleepRequest delaySleepRequest = 1;`
     * @return Whether the delaySleepRequest field is set.
     */
    public fun hasDelaySleepRequest(): kotlin.Boolean {
      return _builder.hasDelaySleepRequest()
    }

    /**
     * `.VCSEC.SleepManagerCommand_E sleepManagerCommand = 2;`
     */
    public var sleepManagerCommand: com.teslamotors.protocol.VCSEC.SleepManagerCommand_E
      @JvmName("getSleepManagerCommand")
      get() = _builder.getSleepManagerCommand()
      @JvmName("setSleepManagerCommand")
      set(value) {
        _builder.setSleepManagerCommand(value)
      }
    public var sleepManagerCommandValue: kotlin.Int
      @JvmName("getSleepManagerCommandValue")
      get() = _builder.getSleepManagerCommandValue()
      @JvmName("setSleepManagerCommandValue")
      set(value) {
        _builder.setSleepManagerCommandValue(value)
      }
    /**
     * `.VCSEC.SleepManagerCommand_E sleepManagerCommand = 2;`
     */
    public fun clearSleepManagerCommand() {
      _builder.clearSleepManagerCommand()
    }
    /**
     * `.VCSEC.SleepManagerCommand_E sleepManagerCommand = 2;`
     * @return Whether the sleepManagerCommand field is set.
     */
    public fun hasSleepManagerCommand(): kotlin.Boolean {
      return _builder.hasSleepManagerCommand()
    }
    public val subMessageCase: com.teslamotors.protocol.VCSEC.SleepManagerRequest.SubMessageCase
      @JvmName("getSubMessageCase")
      get() = _builder.getSubMessageCase()

    public fun clearSubMessage() {
      _builder.clearSubMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.SleepManagerRequest.copy(block: com.teslamotors.protocol.SleepManagerRequestKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.SleepManagerRequest =
  com.teslamotors.protocol.SleepManagerRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.SleepManagerRequestOrBuilder.delaySleepRequestOrNull: com.teslamotors.protocol.VCSEC.DelaySleepRequest?
  get() = if (hasDelaySleepRequest()) getDelaySleepRequest() else null

