// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializetoVCSECMessage")
public inline fun toVCSECMessage(block: com.teslamotors.protocol.ToVCSECMessageKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.ToVCSECMessage =
  com.teslamotors.protocol.ToVCSECMessageKt.Dsl._create(com.teslamotors.protocol.VCSEC.ToVCSECMessage.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.ToVCSECMessage`
 */
public object ToVCSECMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.ToVCSECMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.ToVCSECMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.ToVCSECMessage = _builder.build()

    /**
     * `.VCSEC.SignedMessage signedMessage = 1;`
     */
    public var signedMessage: com.teslamotors.protocol.VCSEC.SignedMessage
      @JvmName("getSignedMessage")
      get() = _builder.getSignedMessage()
      @JvmName("setSignedMessage")
      set(value) {
        _builder.setSignedMessage(value)
      }
    /**
     * `.VCSEC.SignedMessage signedMessage = 1;`
     */
    public fun clearSignedMessage() {
      _builder.clearSignedMessage()
    }
    /**
     * `.VCSEC.SignedMessage signedMessage = 1;`
     * @return Whether the signedMessage field is set.
     */
    public fun hasSignedMessage(): kotlin.Boolean {
      return _builder.hasSignedMessage()
    }

    /**
     * `.VCSEC.UnsignedMessage unsignedMessage = 2;`
     */
    public var unsignedMessage: com.teslamotors.protocol.VCSEC.UnsignedMessage
      @JvmName("getUnsignedMessage")
      get() = _builder.getUnsignedMessage()
      @JvmName("setUnsignedMessage")
      set(value) {
        _builder.setUnsignedMessage(value)
      }
    /**
     * `.VCSEC.UnsignedMessage unsignedMessage = 2;`
     */
    public fun clearUnsignedMessage() {
      _builder.clearUnsignedMessage()
    }
    /**
     * `.VCSEC.UnsignedMessage unsignedMessage = 2;`
     * @return Whether the unsignedMessage field is set.
     */
    public fun hasUnsignedMessage(): kotlin.Boolean {
      return _builder.hasUnsignedMessage()
    }
    public val subMessageCase: com.teslamotors.protocol.VCSEC.ToVCSECMessage.SubMessageCase
      @JvmName("getSubMessageCase")
      get() = _builder.getSubMessageCase()

    public fun clearSubMessage() {
      _builder.clearSubMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.ToVCSECMessage.copy(block: com.teslamotors.protocol.ToVCSECMessageKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.ToVCSECMessage =
  com.teslamotors.protocol.ToVCSECMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.ToVCSECMessageOrBuilder.signedMessageOrNull: com.teslamotors.protocol.VCSEC.SignedMessage?
  get() = if (hasSignedMessage()) getSignedMessage() else null

public val com.teslamotors.protocol.VCSEC.ToVCSECMessageOrBuilder.unsignedMessageOrNull: com.teslamotors.protocol.VCSEC.UnsignedMessage?
  get() = if (hasUnsignedMessage()) getUnsignedMessage() else null

