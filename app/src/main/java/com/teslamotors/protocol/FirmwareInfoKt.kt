// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializefirmwareInfo")
public inline fun firmwareInfo(block: com.teslamotors.protocol.FirmwareInfoKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.FirmwareInfo =
  com.teslamotors.protocol.FirmwareInfoKt.Dsl._create(com.teslamotors.protocol.VCSEC.FirmwareInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.FirmwareInfo`
 */
public object FirmwareInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.FirmwareInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.FirmwareInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.FirmwareInfo = _builder.build()

    /**
     * `.VCSEC.DeviceTarget deviceTarget = 1;`
     */
    public var deviceTarget: com.teslamotors.protocol.VCSEC.DeviceTarget
      @JvmName("getDeviceTarget")
      get() = _builder.getDeviceTarget()
      @JvmName("setDeviceTarget")
      set(value) {
        _builder.setDeviceTarget(value)
      }
    public var deviceTargetValue: kotlin.Int
      @JvmName("getDeviceTargetValue")
      get() = _builder.getDeviceTargetValue()
      @JvmName("setDeviceTargetValue")
      set(value) {
        _builder.setDeviceTargetValue(value)
      }
    /**
     * `.VCSEC.DeviceTarget deviceTarget = 1;`
     */
    public fun clearDeviceTarget() {
      _builder.clearDeviceTarget()
    }

    /**
     * `uint32 versionCounter = 2;`
     */
    public var versionCounter: kotlin.Int
      @JvmName("getVersionCounter")
      get() = _builder.getVersionCounter()
      @JvmName("setVersionCounter")
      set(value) {
        _builder.setVersionCounter(value)
      }
    /**
     * `uint32 versionCounter = 2;`
     */
    public fun clearVersionCounter() {
      _builder.clearVersionCounter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.FirmwareInfo.copy(block: com.teslamotors.protocol.FirmwareInfoKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.FirmwareInfo =
  com.teslamotors.protocol.FirmwareInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

