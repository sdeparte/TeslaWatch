// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializepermissionChange")
public inline fun permissionChange(block: com.teslamotors.protocol.PermissionChangeKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.PermissionChange =
  com.teslamotors.protocol.PermissionChangeKt.Dsl._create(com.teslamotors.protocol.VCSEC.PermissionChange.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.PermissionChange`
 */
public object PermissionChangeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.PermissionChange.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.PermissionChange.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.PermissionChange = _builder.build()

    /**
     * `.VCSEC.PublicKey key = 1;`
     */
    public var key: com.teslamotors.protocol.VCSEC.PublicKey
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * `.VCSEC.PublicKey key = 1;`
     */
    public fun clearKey() {
      _builder.clearKey()
    }
    /**
     * `.VCSEC.PublicKey key = 1;`
     * @return Whether the key field is set.
     */
    public fun hasKey(): kotlin.Boolean {
      return _builder.hasKey()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PermissionProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     */
    public val permission: com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPermissionList()
      )
    /**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     * @param value The permission to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPermission")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.add(value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      _builder.addPermission(value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     * @param value The permission to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPermission")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.plusAssign(value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      add(value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     * @param values The permission to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPermission")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.addAll(values: kotlin.collections.Iterable<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E>) {
      _builder.addAllPermission(values)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     * @param values The permission to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPermission")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.plusAssign(values: kotlin.collections.Iterable<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E>) {
      addAll(values)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     * @param index The index to set the value at.
     * @param value The permission to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPermission")
    public operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.set(index: kotlin.Int, value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      _builder.setPermission(index, value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permission = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPermission")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionProxy>.clear() {
      _builder.clearPermission()
    }
    /**
     * `uint32 secondsToBeActive = 3;`
     */
    public var secondsToBeActive: kotlin.Int
      @JvmName("getSecondsToBeActive")
      get() = _builder.getSecondsToBeActive()
      @JvmName("setSecondsToBeActive")
      set(value) {
        _builder.setSecondsToBeActive(value)
      }
    /**
     * `uint32 secondsToBeActive = 3;`
     */
    public fun clearSecondsToBeActive() {
      _builder.clearSecondsToBeActive()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.PermissionChange.copy(block: com.teslamotors.protocol.PermissionChangeKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.PermissionChange =
  com.teslamotors.protocol.PermissionChangeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.PermissionChangeOrBuilder.keyOrNull: com.teslamotors.protocol.VCSEC.PublicKey?
  get() = if (hasKey()) getKey() else null

