// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializeauthenticationRequest")
public inline fun authenticationRequest(block: com.teslamotors.protocol.AuthenticationRequestKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.AuthenticationRequest =
  com.teslamotors.protocol.AuthenticationRequestKt.Dsl._create(com.teslamotors.protocol.VCSEC.AuthenticationRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.AuthenticationRequest`
 */
public object AuthenticationRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.AuthenticationRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.AuthenticationRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.AuthenticationRequest = _builder.build()

    /**
     * `.VCSEC.KeyIdentifier keyIdToAuth = 1;`
     */
    public var keyIdToAuth: com.teslamotors.protocol.VCSEC.KeyIdentifier
      @JvmName("getKeyIdToAuth")
      get() = _builder.getKeyIdToAuth()
      @JvmName("setKeyIdToAuth")
      set(value) {
        _builder.setKeyIdToAuth(value)
      }
    /**
     * `.VCSEC.KeyIdentifier keyIdToAuth = 1;`
     */
    public fun clearKeyIdToAuth() {
      _builder.clearKeyIdToAuth()
    }
    /**
     * `.VCSEC.KeyIdentifier keyIdToAuth = 1;`
     * @return Whether the keyIdToAuth field is set.
     */
    public fun hasKeyIdToAuth(): kotlin.Boolean {
      return _builder.hasKeyIdToAuth()
    }

    /**
     * `.VCSEC.SessionInfo sessionInfo = 2;`
     */
    public var sessionInfo: com.teslamotors.protocol.VCSEC.SessionInfo
      @JvmName("getSessionInfo")
      get() = _builder.getSessionInfo()
      @JvmName("setSessionInfo")
      set(value) {
        _builder.setSessionInfo(value)
      }
    /**
     * `.VCSEC.SessionInfo sessionInfo = 2;`
     */
    public fun clearSessionInfo() {
      _builder.clearSessionInfo()
    }
    /**
     * `.VCSEC.SessionInfo sessionInfo = 2;`
     * @return Whether the sessionInfo field is set.
     */
    public fun hasSessionInfo(): kotlin.Boolean {
      return _builder.hasSessionInfo()
    }

    /**
     * `.VCSEC.AuthenticationLevel_E requestedLevel = 3;`
     */
    public var requestedLevel: com.teslamotors.protocol.VCSEC.AuthenticationLevel_E
      @JvmName("getRequestedLevel")
      get() = _builder.getRequestedLevel()
      @JvmName("setRequestedLevel")
      set(value) {
        _builder.setRequestedLevel(value)
      }
    public var requestedLevelValue: kotlin.Int
      @JvmName("getRequestedLevelValue")
      get() = _builder.getRequestedLevelValue()
      @JvmName("setRequestedLevelValue")
      set(value) {
        _builder.setRequestedLevelValue(value)
      }
    /**
     * `.VCSEC.AuthenticationLevel_E requestedLevel = 3;`
     */
    public fun clearRequestedLevel() {
      _builder.clearRequestedLevel()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.AuthenticationRequest.copy(block: com.teslamotors.protocol.AuthenticationRequestKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.AuthenticationRequest =
  com.teslamotors.protocol.AuthenticationRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.AuthenticationRequestOrBuilder.keyIdToAuthOrNull: com.teslamotors.protocol.VCSEC.KeyIdentifier?
  get() = if (hasKeyIdToAuth()) getKeyIdToAuth() else null

public val com.teslamotors.protocol.VCSEC.AuthenticationRequestOrBuilder.sessionInfoOrNull: com.teslamotors.protocol.VCSEC.SessionInfo?
  get() = if (hasSessionInfo()) getSessionInfo() else null

