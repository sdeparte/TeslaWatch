// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializekeyStatus")
public inline fun keyStatus(block: com.teslamotors.protocol.KeyStatusKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.KeyStatus =
  com.teslamotors.protocol.KeyStatusKt.Dsl._create(com.teslamotors.protocol.VCSEC.KeyStatus.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.KeyStatus`
 */
public object KeyStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.KeyStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.KeyStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.KeyStatus = _builder.build()

    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     */
    public var keyId: com.teslamotors.protocol.VCSEC.KeyIdentifier
      @JvmName("getKeyId")
      get() = _builder.getKeyId()
      @JvmName("setKeyId")
      set(value) {
        _builder.setKeyId(value)
      }
    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     */
    public fun clearKeyId() {
      _builder.clearKeyId()
    }
    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     * @return Whether the keyId field is set.
     */
    public fun hasKeyId(): kotlin.Boolean {
      return _builder.hasKeyId()
    }

    /**
     * `.VCSEC.NFCPresence nfcPresence = 2;`
     */
    public var nfcPresence: com.teslamotors.protocol.VCSEC.NFCPresence
      @JvmName("getNfcPresence")
      get() = _builder.getNfcPresence()
      @JvmName("setNfcPresence")
      set(value) {
        _builder.setNfcPresence(value)
      }
    public var nfcPresenceValue: kotlin.Int
      @JvmName("getNfcPresenceValue")
      get() = _builder.getNfcPresenceValue()
      @JvmName("setNfcPresenceValue")
      set(value) {
        _builder.setNfcPresenceValue(value)
      }
    /**
     * `.VCSEC.NFCPresence nfcPresence = 2;`
     */
    public fun clearNfcPresence() {
      _builder.clearNfcPresence()
    }

    /**
     * `.VCSEC.BLEPresence blePresence = 3;`
     */
    public var blePresence: com.teslamotors.protocol.VCSEC.BLEPresence
      @JvmName("getBlePresence")
      get() = _builder.getBlePresence()
      @JvmName("setBlePresence")
      set(value) {
        _builder.setBlePresence(value)
      }
    public var blePresenceValue: kotlin.Int
      @JvmName("getBlePresenceValue")
      get() = _builder.getBlePresenceValue()
      @JvmName("setBlePresenceValue")
      set(value) {
        _builder.setBlePresenceValue(value)
      }
    /**
     * `.VCSEC.BLEPresence blePresence = 3;`
     */
    public fun clearBlePresence() {
      _builder.clearBlePresence()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.KeyStatus.copy(block: com.teslamotors.protocol.KeyStatusKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.KeyStatus =
  com.teslamotors.protocol.KeyStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.KeyStatusOrBuilder.keyIdOrNull: com.teslamotors.protocol.VCSEC.KeyIdentifier?
  get() = if (hasKeyId()) getKeyId() else null

