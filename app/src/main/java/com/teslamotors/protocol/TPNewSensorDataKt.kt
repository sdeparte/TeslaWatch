// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializetPNewSensorData")
public inline fun tPNewSensorData(block: com.teslamotors.protocol.TPNewSensorDataKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.TPNewSensorData =
  com.teslamotors.protocol.TPNewSensorDataKt.Dsl._create(com.teslamotors.protocol.VCSEC.TPNewSensorData.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.TPNewSensorData`
 */
public object TPNewSensorDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.TPNewSensorData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.TPNewSensorData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.TPNewSensorData = _builder.build()

    /**
     * `.VCSEC.PublicKey sensorPublicKey = 1;`
     */
    public var sensorPublicKey: com.teslamotors.protocol.VCSEC.PublicKey
      @JvmName("getSensorPublicKey")
      get() = _builder.getSensorPublicKey()
      @JvmName("setSensorPublicKey")
      set(value) {
        _builder.setSensorPublicKey(value)
      }
    /**
     * `.VCSEC.PublicKey sensorPublicKey = 1;`
     */
    public fun clearSensorPublicKey() {
      _builder.clearSensorPublicKey()
    }
    /**
     * `.VCSEC.PublicKey sensorPublicKey = 1;`
     * @return Whether the sensorPublicKey field is set.
     */
    public fun hasSensorPublicKey(): kotlin.Boolean {
      return _builder.hasSensorPublicKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.TPNewSensorData.copy(block: com.teslamotors.protocol.TPNewSensorDataKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.TPNewSensorData =
  com.teslamotors.protocol.TPNewSensorDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.TPNewSensorDataOrBuilder.sensorPublicKeyOrNull: com.teslamotors.protocol.VCSEC.PublicKey?
  get() = if (hasSensorPublicKey()) getSensorPublicKey() else null

