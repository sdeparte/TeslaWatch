// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializewhitelistEntryInfo")
public inline fun whitelistEntryInfo(block: com.teslamotors.protocol.WhitelistEntryInfoKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.WhitelistEntryInfo =
  com.teslamotors.protocol.WhitelistEntryInfoKt.Dsl._create(com.teslamotors.protocol.VCSEC.WhitelistEntryInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.WhitelistEntryInfo`
 */
public object WhitelistEntryInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.WhitelistEntryInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.WhitelistEntryInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.WhitelistEntryInfo = _builder.build()

    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     */
    public var keyId: com.teslamotors.protocol.VCSEC.KeyIdentifier
      @JvmName("getKeyId")
      get() = _builder.getKeyId()
      @JvmName("setKeyId")
      set(value) {
        _builder.setKeyId(value)
      }
    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     */
    public fun clearKeyId() {
      _builder.clearKeyId()
    }
    /**
     * `.VCSEC.KeyIdentifier keyId = 1;`
     * @return Whether the keyId field is set.
     */
    public fun hasKeyId(): kotlin.Boolean {
      return _builder.hasKeyId()
    }

    /**
     * `.VCSEC.PublicKey publicKey = 2;`
     */
    public var publicKey: com.teslamotors.protocol.VCSEC.PublicKey
      @JvmName("getPublicKey")
      get() = _builder.getPublicKey()
      @JvmName("setPublicKey")
      set(value) {
        _builder.setPublicKey(value)
      }
    /**
     * `.VCSEC.PublicKey publicKey = 2;`
     */
    public fun clearPublicKey() {
      _builder.clearPublicKey()
    }
    /**
     * `.VCSEC.PublicKey publicKey = 2;`
     * @return Whether the publicKey field is set.
     */
    public fun hasPublicKey(): kotlin.Boolean {
      return _builder.hasPublicKey()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PermissionsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     */
    public val permissions: com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPermissionsList()
      )
    /**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     * @param value The permissions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPermissions")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.add(value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      _builder.addPermissions(value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     * @param value The permissions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPermissions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.plusAssign(value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      add(value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     * @param values The permissions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPermissions")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.addAll(values: kotlin.collections.Iterable<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E>) {
      _builder.addAllPermissions(values)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     * @param values The permissions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPermissions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.plusAssign(values: kotlin.collections.Iterable<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E>) {
      addAll(values)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     * @param index The index to set the value at.
     * @param value The permissions to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPermissions")
    public operator fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.set(index: kotlin.Int, value: com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E) {
      _builder.setPermissions(index, value)
    }/**
     * `repeated .VCSEC.WhitelistKeyPermission_E permissions = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPermissions")
    public fun com.google.protobuf.kotlin.DslList<com.teslamotors.protocol.VCSEC.WhitelistKeyPermission_E, PermissionsProxy>.clear() {
      _builder.clearPermissions()
    }
    /**
     * `.VCSEC.KeyMetadata metadataForKey = 4;`
     */
    public var metadataForKey: com.teslamotors.protocol.VCSEC.KeyMetadata
      @JvmName("getMetadataForKey")
      get() = _builder.getMetadataForKey()
      @JvmName("setMetadataForKey")
      set(value) {
        _builder.setMetadataForKey(value)
      }
    /**
     * `.VCSEC.KeyMetadata metadataForKey = 4;`
     */
    public fun clearMetadataForKey() {
      _builder.clearMetadataForKey()
    }
    /**
     * `.VCSEC.KeyMetadata metadataForKey = 4;`
     * @return Whether the metadataForKey field is set.
     */
    public fun hasMetadataForKey(): kotlin.Boolean {
      return _builder.hasMetadataForKey()
    }

    /**
     * `uint32 secondsEntryRemainsActive = 5;`
     */
    public var secondsEntryRemainsActive: kotlin.Int
      @JvmName("getSecondsEntryRemainsActive")
      get() = _builder.getSecondsEntryRemainsActive()
      @JvmName("setSecondsEntryRemainsActive")
      set(value) {
        _builder.setSecondsEntryRemainsActive(value)
      }
    /**
     * `uint32 secondsEntryRemainsActive = 5;`
     */
    public fun clearSecondsEntryRemainsActive() {
      _builder.clearSecondsEntryRemainsActive()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.WhitelistEntryInfo.copy(block: com.teslamotors.protocol.WhitelistEntryInfoKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.WhitelistEntryInfo =
  com.teslamotors.protocol.WhitelistEntryInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.WhitelistEntryInfoOrBuilder.keyIdOrNull: com.teslamotors.protocol.VCSEC.KeyIdentifier?
  get() = if (hasKeyId()) getKeyId() else null

public val com.teslamotors.protocol.VCSEC.WhitelistEntryInfoOrBuilder.publicKeyOrNull: com.teslamotors.protocol.VCSEC.PublicKey?
  get() = if (hasPublicKey()) getPublicKey() else null

public val com.teslamotors.protocol.VCSEC.WhitelistEntryInfoOrBuilder.metadataForKeyOrNull: com.teslamotors.protocol.VCSEC.KeyMetadata?
  get() = if (hasMetadataForKey()) getMetadataForKey() else null

