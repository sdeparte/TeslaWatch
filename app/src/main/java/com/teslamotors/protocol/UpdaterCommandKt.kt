// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/VCSECv3.10.14.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.teslamotors.protocol;

@kotlin.jvm.JvmName("-initializeupdaterCommand")
public inline fun updaterCommand(block: com.teslamotors.protocol.UpdaterCommandKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.UpdaterCommand =
  com.teslamotors.protocol.UpdaterCommandKt.Dsl._create(com.teslamotors.protocol.VCSEC.UpdaterCommand.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `VCSEC.UpdaterCommand`
 */
public object UpdaterCommandKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.teslamotors.protocol.VCSEC.UpdaterCommand.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.teslamotors.protocol.VCSEC.UpdaterCommand.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.teslamotors.protocol.VCSEC.UpdaterCommand = _builder.build()

    /**
     * `.VCSEC.GetCodeDescriptor getCodeDescriptor = 1;`
     */
    public var getCodeDescriptor: com.teslamotors.protocol.VCSEC.GetCodeDescriptor
      @JvmName("getGetCodeDescriptor")
      get() = _builder.getGetCodeDescriptor()
      @JvmName("setGetCodeDescriptor")
      set(value) {
        _builder.setGetCodeDescriptor(value)
      }
    /**
     * `.VCSEC.GetCodeDescriptor getCodeDescriptor = 1;`
     */
    public fun clearGetCodeDescriptor() {
      _builder.clearGetCodeDescriptor()
    }
    /**
     * `.VCSEC.GetCodeDescriptor getCodeDescriptor = 1;`
     * @return Whether the getCodeDescriptor field is set.
     */
    public fun hasGetCodeDescriptor(): kotlin.Boolean {
      return _builder.hasGetCodeDescriptor()
    }

    /**
     * `.VCSEC.SetUpdaterLocation setUpdaterLocation = 2;`
     */
    public var setUpdaterLocation: com.teslamotors.protocol.VCSEC.SetUpdaterLocation
      @JvmName("getSetUpdaterLocation")
      get() = _builder.getSetUpdaterLocation()
      @JvmName("setSetUpdaterLocation")
      set(value) {
        _builder.setSetUpdaterLocation(value)
      }
    /**
     * `.VCSEC.SetUpdaterLocation setUpdaterLocation = 2;`
     */
    public fun clearSetUpdaterLocation() {
      _builder.clearSetUpdaterLocation()
    }
    /**
     * `.VCSEC.SetUpdaterLocation setUpdaterLocation = 2;`
     * @return Whether the setUpdaterLocation field is set.
     */
    public fun hasSetUpdaterLocation(): kotlin.Boolean {
      return _builder.hasSetUpdaterLocation()
    }

    /**
     * `.VCSEC.StageBlock stageBlock = 3;`
     */
    public var stageBlock: com.teslamotors.protocol.VCSEC.StageBlock
      @JvmName("getStageBlock")
      get() = _builder.getStageBlock()
      @JvmName("setStageBlock")
      set(value) {
        _builder.setStageBlock(value)
      }
    /**
     * `.VCSEC.StageBlock stageBlock = 3;`
     */
    public fun clearStageBlock() {
      _builder.clearStageBlock()
    }
    /**
     * `.VCSEC.StageBlock stageBlock = 3;`
     * @return Whether the stageBlock field is set.
     */
    public fun hasStageBlock(): kotlin.Boolean {
      return _builder.hasStageBlock()
    }

    /**
     * `.VCSEC.VerifyAndInstallApp verifyAndInstallApp = 4;`
     */
    public var verifyAndInstallApp: com.teslamotors.protocol.VCSEC.VerifyAndInstallApp
      @JvmName("getVerifyAndInstallApp")
      get() = _builder.getVerifyAndInstallApp()
      @JvmName("setVerifyAndInstallApp")
      set(value) {
        _builder.setVerifyAndInstallApp(value)
      }
    /**
     * `.VCSEC.VerifyAndInstallApp verifyAndInstallApp = 4;`
     */
    public fun clearVerifyAndInstallApp() {
      _builder.clearVerifyAndInstallApp()
    }
    /**
     * `.VCSEC.VerifyAndInstallApp verifyAndInstallApp = 4;`
     * @return Whether the verifyAndInstallApp field is set.
     */
    public fun hasVerifyAndInstallApp(): kotlin.Boolean {
      return _builder.hasVerifyAndInstallApp()
    }

    /**
     * `bytes firmwareInfo = 5;`
     */
    public var firmwareInfo: com.google.protobuf.ByteString
      @JvmName("getFirmwareInfo")
      get() = _builder.getFirmwareInfo()
      @JvmName("setFirmwareInfo")
      set(value) {
        _builder.setFirmwareInfo(value)
      }
    /**
     * `bytes firmwareInfo = 5;`
     */
    public fun clearFirmwareInfo() {
      _builder.clearFirmwareInfo()
    }
    /**
     * `bytes firmwareInfo = 5;`
     * @return Whether the firmwareInfo field is set.
     */
    public fun hasFirmwareInfo(): kotlin.Boolean {
      return _builder.hasFirmwareInfo()
    }
    public val subMessageCase: com.teslamotors.protocol.VCSEC.UpdaterCommand.SubMessageCase
      @JvmName("getSubMessageCase")
      get() = _builder.getSubMessageCase()

    public fun clearSubMessage() {
      _builder.clearSubMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.teslamotors.protocol.VCSEC.UpdaterCommand.copy(block: com.teslamotors.protocol.UpdaterCommandKt.Dsl.() -> kotlin.Unit): com.teslamotors.protocol.VCSEC.UpdaterCommand =
  com.teslamotors.protocol.UpdaterCommandKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.teslamotors.protocol.VCSEC.UpdaterCommandOrBuilder.getCodeDescriptorOrNull: com.teslamotors.protocol.VCSEC.GetCodeDescriptor?
  get() = if (hasGetCodeDescriptor()) getGetCodeDescriptor() else null

public val com.teslamotors.protocol.VCSEC.UpdaterCommandOrBuilder.setUpdaterLocationOrNull: com.teslamotors.protocol.VCSEC.SetUpdaterLocation?
  get() = if (hasSetUpdaterLocation()) getSetUpdaterLocation() else null

public val com.teslamotors.protocol.VCSEC.UpdaterCommandOrBuilder.stageBlockOrNull: com.teslamotors.protocol.VCSEC.StageBlock?
  get() = if (hasStageBlock()) getStageBlock() else null

public val com.teslamotors.protocol.VCSEC.UpdaterCommandOrBuilder.verifyAndInstallAppOrNull: com.teslamotors.protocol.VCSEC.VerifyAndInstallApp?
  get() = if (hasVerifyAndInstallApp()) getVerifyAndInstallApp() else null

